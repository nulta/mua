[Tokens]
1       1:1     KEYWORD local
7       1:7     KEYWORD function
16      1:16    NAME    exceptError
27      1:27    SYMBOL  (
28      1:28    NAME    code
32      1:32    SYMBOL  )
34      2:2     NAME    counts
41      2:9     SYMBOL  =
43      2:11    NAME    counts
50      2:18    SYMBOL  +
52      2:20    NUMBER_LITERAL  1
54      3:2     NAME    print
59      3:7     SYMBOL  (
60      3:8     STRING_LITERAL  ""
62      3:10    SYMBOL  )
103     6:2     NAME    print
108     6:7     SYMBOL  (
109     6:8     STRING_LITERAL  ""
111     6:10    SYMBOL  )
113     7:2     NAME    print
118     7:7     SYMBOL  (
119     7:8     STRING_LITERAL  "[ Test #"
130     7:19    SYMBOL  ..
133     7:22    NAME    counts
140     7:29    SYMBOL  ..
143     7:32    STRING_LITERAL  " ]"
147     7:36    SYMBOL  )
149     8:2     KEYWORD if
152     8:5     KEYWORD not
156     8:9     NAME    code
160     8:13    SYMBOL  :
161     8:14    NAME    find
165     8:18    SYMBOL  (
166     8:19    STRING_LITERAL  "\n"
170     8:23    SYMBOL  )
172     8:25    KEYWORD then
181     9:6     NAME    print
186     9:11    SYMBOL  (
187     9:12    STRING_LITERAL  "> "
192     9:17    SYMBOL  ..
195     9:20    NAME    code
199     9:24    SYMBOL  )
201     10:2    KEYWORD end
205     11:2    KEYWORD local
211     11:8    NAME    tokens
218     11:15   SYMBOL  =
220     11:17   NAME    Lexer
225     11:22   SYMBOL  .
226     11:23   NAME    new
229     11:26   SYMBOL  (
230     11:27   NAME    code
234     11:31   SYMBOL  )
235     11:32   SYMBOL  :
236     11:33   NAME    lex
239     11:36   SYMBOL  (
240     11:37   SYMBOL  )
242     12:2    KEYWORD local
248     12:8    NAME    ok
250     12:10   SYMBOL  ,
252     12:12   NAME    err
256     12:16   SYMBOL  =
258     12:18   NAME    pcall
263     12:23   SYMBOL  (
264     12:24   KEYWORD function
272     12:32   SYMBOL  (
273     12:33   SYMBOL  )
275     12:35   NAME    Parser
281     12:41   SYMBOL  .
282     12:42   NAME    new
285     12:45   SYMBOL  (
286     12:46   NAME    tokens
292     12:52   SYMBOL  )
293     12:53   SYMBOL  :
294     12:54   NAME    parse
299     12:59   SYMBOL  (
300     12:60   SYMBOL  )
302     12:62   KEYWORD end
305     12:65   SYMBOL  )
307     13:2    KEYWORD if
310     13:5    KEYWORD not
314     13:9    NAME    ok
317     13:12   KEYWORD then
326     14:6    NAME    print
331     14:11   SYMBOL  (
332     14:12   STRING_LITERAL  "Caught excepted error"
355     14:35   SYMBOL  )
361     15:6    NAME    print
366     15:11   SYMBOL  (
367     15:12   NAME    err
370     15:15   SYMBOL  )
372     16:2    KEYWORD else
381     17:6    NAME    error
386     17:11   SYMBOL  (
387     17:12   STRING_LITERAL  "Excepted error, but the code was executed with no error"
444     17:69   SYMBOL  )
446     18:2    KEYWORD end
450     19:2    KEYWORD end
458     20:6    EOF

AST: {
    LocalFunctionDeclarationStatNode {
        name: "exceptError"
        block: {
            VariableAssignmentStatNode {
                variables: {
                    NameExpNode {
                        name: "counts"
                    }
                }
                expressions: {
                    BinaryOpExpNode {
                        L: NameExpNode {
                            name: "counts"
                        }
                        O: "+"
                        R: NumberLiteralExpNode {
                            value: 1
                        }
                    }
                }
            }
            FunctionCallStatNode {
                args: {
                    StringLiteralExpNode {
                        value: ""
                    }
                }
                target: NameExpNode {
                    name: "print"
                }
            }
            FunctionCallStatNode {
                args: {
                    StringLiteralExpNode {
                        value: ""
                    }
                }
                target: NameExpNode {
                    name: "print"
                }
            }
            FunctionCallStatNode {
                args: {
                    BinaryOpExpNode {
                        L: StringLiteralExpNode {
                            value: "[ Test #"
                        }
                        O: ".."
                        R: BinaryOpExpNode {
                            L: NameExpNode {
                                name: "counts"
                            }
                            O: ".."
                            R: StringLiteralExpNode {
                                value: " ]"
                            }
                        }
                    }
                }
                target: NameExpNode {
                    name: "print"
                }
            }
            IfStatNode {
                ifNodes: {
                    {
                        block: {
                            FunctionCallStatNode {
                                args: {
                                    BinaryOpExpNode {
                                        L: StringLiteralExpNode {
                                            value: "> "
                                        }
                                        O: ".."
                                        R: NameExpNode {
                                            name: "code"
                                        }
                                    }
                                }
                                target: NameExpNode {
                                    name: "print"
                                }
                            }
                        }
                        condition: UnaryOpExpNode {
                            O: "not"
                            expression: FunctionCallExpNode {
                                args: {
                                    StringLiteralExpNode {
                                        value: "\n"
                                    }
                                }
                                method: "find"
                                target: NameExpNode {
                                    name: "code"
                                }
                            }
                        }
                    }
                }
            }
            LocalVariableAssignmentStatNode {
                expressions: {
                    FunctionCallExpNode {
                        args: {}
                        method: "lex"
                        target: FunctionCallExpNode {
                            target: TableIndexExpNode {
                                target: NameExpNode {
                                    name: "Lexer"
                                }
                                key: StringLiteralExpNode {
                                    value: "new"
                                }
                            }
                            args: {
                                NameExpNode {
                                    name: "code"
                                }
                            }
                        }
                    }
                }
                names: {
                    "tokens"
                }
            }
            LocalVariableAssignmentStatNode {
                expressions: {
                    FunctionCallExpNode {
                        target: NameExpNode {
                            name: "pcall"
                        }
                        args: {
                            FunctionDefExpNode {
                                block: {
                                    FunctionCallStatNode {
                                        args: {}
                                        method: "parse"
                                        target: FunctionCallExpNode {       
                                            target: TableIndexExpNode {     
                                                target: NameExpNode {       
                                                    name: "Parser"
                                                }
                                                key: StringLiteralExpNode { 
                                                    value: "new"
                                                }
                                            }
                                            args: {
                                                NameExpNode {
                                                    name: "tokens"
                                                }
                                            }
                                        }
                                    }
                                }
                                parameters: {}
                            }
                        }
                    }
                }
                names: {
                    "ok"
                    "err"
                }
            }
            IfStatNode {
                elseBlock: {
                    FunctionCallStatNode {
                        args: {
                            StringLiteralExpNode {
                                value: "Excepted error, but the code was executed with no error"
                            }
                        }
                        target: NameExpNode {
                            name: "error"
                        }
                    }
                }
                ifNodes: {
                    {
                        block: {
                            FunctionCallStatNode {
                                args: {
                                    StringLiteralExpNode {
                                        value: "Caught excepted error"      
                                    }
                                }
                                target: NameExpNode {
                                    name: "print"
                                }
                            }
                            FunctionCallStatNode {
                                args: {
                                    NameExpNode {
                                        name: "err"
                                    }
                                }
                                target: NameExpNode {
                                    name: "print"
                                }
                            }
                        }
                        condition: UnaryOpExpNode {
                            O: "not"
                            expression: NameExpNode {
                                name: "ok"
                            }
                        }
                    }
                }
            }
        }
        parameters: {
            "code"
        }
    }
    filename: "[?]"
}