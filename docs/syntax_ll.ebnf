chunk ::= block

block ::= {stat} [retstat]

stat ::=  ';' |
	 varlist '=' explist |
	 functioncall |
	 label |
	 break |
	 goto Name |
	 do block end |
	 while exp do block end |
	 repeat block until exp |
	 if exp then block {elseif exp then block} [else block] end |
	 for Name '=' exp ',' exp [',' exp] do block end |
	 for namelist in explist do block end |
	 function funcname funcbody |
	 local function Name funcbody |
	 local namelist ['=' explist] |
	 muaStat

retstat ::= return [explist] [';']

label ::= '::' Name '::'

funcname ::= Name {'.' Name} [':' Name]


functiondef ::= function funcbody | muaFn

funcbody ::= '(' [parlist] ')' block end

parlist ::= namelist [',' '...'] | '...'

namelist ::= Name {',' Name}


tableconstructor ::= '{' [fieldlist] '}'

fieldlist ::= field {fieldsep field} [fieldsep]

field ::= '[' exp ']' '=' exp | Name '=' exp | exp

fieldsep ::= ',' | ';'


simpleexp ::= nil | false | true | Numeral | LiteralString | '...'
        | functiondef | tableconstructor | muaSimpleExp

varlist ::= var {',' var}


primaryexp ::= simpleexp | unop exp | prefixexp

(* `exp binop exp` is parsed using Pratt parsing algorithm (not LL) *)
exp ::= primaryexp | exp binop exp


prefixexp ::= prefixexp_1 {prefixexp_2}

prefixexp_1 ::=
	'(' exp ')'
	| Name

prefixexp_2 ::=
	  '[' exp ']'     (* var *)
	| '.' Name        (* var *)
	| ':' Name args   (* functioncall *)
	| args            (* functioncall *)


var ::=  Name | prefixexp '[' exp ']' | prefixexp '.' Name

functioncall ::=  prefixexp args | prefixexp ':' Name args


explist ::= exp {',' exp}

args ::=  '(' [explist] ')' | tableconstructor | LiteralString


binop ::=  '+' | '-' | '*' | '/' | '//' | '^' | '%' |
	 '&' | '~' | '|' | '>>' | '<<' | '..' |
	 '<' | '<=' | '>' | '>=' | '==' | '~=' |
	 and | or

unop ::= '-' | not | '#' | '~'


(* -- Mua -- *)

muaStat ::= continue

muaSimpleExp ::= muaFn

muaFn ::= fn funcbody

